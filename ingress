Ingress is a powerful tool for managing external access to services in your cluster, and here's a step-by-step guide on how I accomplished it:

𝟭. 𝗦𝗲𝗿𝘃𝗶𝗰𝗲 𝗔𝗰𝗰𝗼𝘂𝗻𝘁 𝗦𝗲𝘁𝘂𝗽:
Started off by creating a service account and assigning a custom AWS IAM policy for the AWS Load Balancer controller. This ensures the controller has the necessary permissions to interact with AWS resources.

𝒂𝒑𝒊𝑽𝒆𝒓𝒔𝒊𝒐𝒏: 𝒗1
𝒌𝒊𝒏𝒅: 𝑺𝒆𝒓𝒗𝒊𝒄𝒆𝑨𝒄𝒄𝒐𝒖𝒏𝒕
𝒎𝒆𝒕𝒂𝒅𝒂𝒕𝒂:
 𝒏𝒂𝒎𝒆: 𝒎𝒚-𝒊𝒏𝒈𝒓𝒆𝒔𝒔-𝒔𝒂

𝟮. 𝗛𝗲𝗹𝗺 𝗜𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻:
Next, I installed Helm and added the EKS repository to make the AWS Load Balancer controller installation seamless.

𝒉𝒆𝒍𝒎 𝒓𝒆𝒑𝒐 𝒂𝒅𝒅 𝒆𝒌𝒔 𝒉𝒕𝒕𝒑𝒔://𝒂𝒘𝒔.𝒈𝒊𝒕𝒉𝒖𝒃.𝒊𝒐/𝒆𝒌𝒔-𝒄𝒉𝒂𝒓𝒕𝒔
𝒉𝒆𝒍𝒎 𝒓𝒆𝒑𝒐 𝒖𝒑𝒅𝒂𝒕𝒆

𝟯. 𝗔𝗪𝗦 𝗟𝗼𝗮𝗱 𝗕𝗮𝗹𝗮𝗻𝗰𝗲𝗿 𝗖𝗼𝗻𝘁𝗿𝗼𝗹𝗹𝗲𝗿 𝗜𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻:
Installed the AWS Load Balancer controller using Helm, leveraging the IAM policy assigned to the service account.

𝒉𝒆𝒍𝒎 𝒊𝒏𝒔𝒕𝒂𝒍𝒍 𝒂𝒘𝒔-𝒍𝒐𝒂𝒅-𝒃𝒂𝒍𝒂𝒏𝒄𝒆𝒓-𝒄𝒐𝒏𝒕𝒓𝒐𝒍𝒍𝒆𝒓 𝒆𝒌𝒔/𝒂𝒘𝒔-𝒍𝒐𝒂𝒅-𝒃𝒂𝒍𝒂𝒏𝒄𝒆𝒓-𝒄𝒐𝒏𝒕𝒓𝒐𝒍𝒍𝒆𝒓 -𝒏 𝒌𝒖𝒃𝒆-𝒔𝒚𝒔𝒕𝒆𝒎 --𝒔𝒆𝒕 𝒔𝒆𝒓𝒗𝒊𝒄𝒆𝑨𝒄𝒄𝒐𝒖𝒏𝒕.𝒄𝒓𝒆𝒂𝒕𝒆=𝒇𝒂𝒍𝒔𝒆 --𝒔𝒆𝒕 𝒔𝒆𝒓𝒗𝒊𝒄𝒆𝑨𝒄𝒄𝒐𝒖𝒏𝒕.𝒏𝒂𝒎𝒆=𝒎𝒚-𝒊𝒏𝒈𝒓𝒆𝒔𝒔-𝒔𝒂

𝟰. 𝗜𝗻𝗴𝗿𝗲𝘀𝘀 𝗖𝗹𝗮𝘀𝘀 𝗖𝗿𝗲𝗮𝘁𝗶𝗼𝗻:
Defined an Ingress class using a YAML file and kubectl. This step helps identify which controller should be responsible for handling Ingress resources.

𝒂𝒑𝒊𝑽𝒆𝒓𝒔𝒊𝒐𝒏: 𝒏𝒆𝒕𝒘𝒐𝒓𝒌𝒊𝒏𝒈.𝒌8𝒔.𝒊𝒐/𝒗1
𝒌𝒊𝒏𝒅: 𝑰𝒏𝒈𝒓𝒆𝒔𝒔𝑪𝒍𝒂𝒔𝒔
𝒎𝒆𝒕𝒂𝒅𝒂𝒕𝒂:
 𝒏𝒂𝒎𝒆: 𝒎𝒚-𝒊𝒏𝒈𝒓𝒆𝒔𝒔-𝒄𝒍𝒂𝒔𝒔
𝒔𝒑𝒆𝒄:
 𝒄𝒐𝒏𝒕𝒓𝒐𝒍𝒍𝒆𝒓: 𝒆𝒌𝒔.𝒂𝒎𝒂𝒛𝒐𝒏𝒂𝒘𝒔.𝒄𝒐𝒎/𝒂𝒘𝒔-𝒍𝒐𝒂𝒅-𝒃𝒂𝒍𝒂𝒏𝒄𝒆𝒓-𝒄𝒐𝒏𝒕𝒓𝒐𝒍𝒍𝒆𝒓

𝟱. 𝗜𝗻𝗴𝗿𝗲𝘀𝘀 𝗥𝘂𝗹𝗲𝘀 𝗗𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁:
Finally, deployed Ingress rules using a YAML file containing all the necessary information about the service.

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
 name: my-ingress
 annotations:
 https://lnkd.in/gJJ4eSwc: my-ingress-class
spec:
 rules:
 - host: xyzabc . com
 http:
 paths:
 - path: /
 pathType: Prefix
 backend:
 service:
 name: my-service
 port:
 number: 80
